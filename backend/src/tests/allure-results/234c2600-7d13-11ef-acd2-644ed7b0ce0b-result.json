{"name":"[Get] success","fullName":"Test_Runner/RoomSuite/TestRoomGet01","status":"failed","statusDetails":{"message":"\tError:      \tNot equal: \n\t            \texpected: *model.Room(\u0026model.Room{Id:1, Name:\"1\", StudioId:1, StartHour:0, EndHour:0})\n\t            \tactual  : *mocks.IRoomRepository(\u0026mocks.IRoomRepository{Mock:mock.Mock{ExpectedCalls:[]*mock.Call{(*mock.Call)(0xc00051e160)}, Calls:[]mock.Call{mock.Call{Parent:(*mock.Mock)(0xc00051a000), Method:\"Get\", Arguments:mock.Arguments{context.backgroundCtx{emptyCtx:context.emptyCtx{}}, (*dto.GetRoomRequest)(0xc000692118)}, ReturnArguments:mock.Arguments{}, callerInfo:[]string{\"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/repository/interface/mocks/IRoomRepository.go:57\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/service/impl/room.go:34\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:46\", \"C:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/core/common/steps.go:27\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:23\"}, Repeatability:0, totalCalls:0, optional:false, WaitFor:(\u003c-chan time.Time)(nil), waitTime:0, RunFn:(func(mock.Arguments))(nil), PanicMsg:(*string)(nil), requires:[]*mock.Call(nil)}}, test:mock.TestingT(nil), testData:objx.Map(nil), mutex:sync.Mutex{state:0, sema:0x0}}})\n","trace":"\n\n\tError Trace:\tC:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/asserts_wrapper/wrapper/wrapper.go:105\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/asserts_wrapper/wrapper/helper.go:37\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/asserts_wrapper/wrapper/wrapper.go:101\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/asserts_wrapper/helper/helper.go:32\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:51\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/core/common/steps.go:27\n\t            \t\t\t\tC:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:23\n\tError:      \tNot equal: \n\t            \texpected: *model.Room(\u0026model.Room{Id:1, Name:\"1\", StudioId:1, StartHour:0, EndHour:0})\n\t            \tactual  : *mocks.IRoomRepository(\u0026mocks.IRoomRepository{Mock:mock.Mock{ExpectedCalls:[]*mock.Call{(*mock.Call)(0xc00051e160)}, Calls:[]mock.Call{mock.Call{Parent:(*mock.Mock)(0xc00051a000), Method:\"Get\", Arguments:mock.Arguments{context.backgroundCtx{emptyCtx:context.emptyCtx{}}, (*dto.GetRoomRequest)(0xc000692118)}, ReturnArguments:mock.Arguments{}, callerInfo:[]string{\"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/repository/interface/mocks/IRoomRepository.go:57\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/service/impl/room.go:34\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:46\", \"C:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/core/common/steps.go:27\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:23\"}, Repeatability:0, totalCalls:0, optional:false, WaitFor:(\u003c-chan time.Time)(nil), waitTime:0, RunFn:(func(mock.Arguments))(nil), PanicMsg:(*string)(nil), requires:[]*mock.Call(nil)}}, test:mock.TestingT(nil), testData:objx.Map(nil), mutex:sync.Mutex{state:0, sema:0x0}}})\n\tTest:       \t[Get] success\n"},"start":1727470662182,"stop":1727470662201,"uuid":"234c2600-7d13-11ef-acd2-644ed7b0ce0b","historyId":"845ae267d3426e6bc2ac1fdde77e271a","testCaseId":"10ff9faafc2c45b081d90b7bf2754c5b","labels":[{"name":"language","value":"go1.22.4"},{"name":"framework","value":"Allure-Go@v0.6.0"},{"name":"host","value":"NB3558"},{"name":"thread","value":"Test_Runner/RoomSuite/TestRoomGet01"},{"name":"suite","value":"RoomSuite"},{"name":"package","value":"backend/src/tests/service_test_test.Test_Runner"},{"name":"tag","value":"room"},{"name":"tag","value":"get"}],"steps":[{"name":"successfully get","status":"failed","start":1727470662198,"stop":1727470662201,"steps":[{"name":"ASSERT: No Error","status":"passed","start":1727470662199,"stop":1727470662199,"parameters":[{"name":"Actual","value":"\u003cnil\u003e"}]},{"name":"ASSERT: Equal","status":"failed","start":1727470662199,"stop":1727470662199,"parameters":[{"name":"Expected","value":"*model.Room(\u0026model.Room{Id:1, Name:\"1\", StudioId:1, StartHour:0, EndHour:0})"},{"name":"Actual","value":"*mocks.IRoomRepository(\u0026mocks.IRoomRepository{Mock:mock.Mock{ExpectedCalls:[]*mock.Call{(*mock.Call)(0xc00051e160)}, Calls:[]mock.Call{mock.Call{Parent:(*mock.Mock)(0xc00051a000), Method:\"Get\", Arguments:mock.Arguments{context.backgroundCtx{emptyCtx:context.emptyCtx{}}, (*dto.GetRoomRequest)(0xc000692118)}, ReturnArguments:mock.Arguments{}, callerInfo:[]string{\"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/repository/interface/mocks/IRoomRepository.go:57\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/internal/service/impl/room.go:34\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:46\", \"C:/Users/nikita.turchanskiy/go/pkg/mod/github.com/ozontech/allure-go/pkg/framework@v0.6.32/core/common/steps.go:27\", \"C:/Users/nikita.turchanskiy/bmstu/testing/backend/src/tests/service_test/room_test.go:23\"}, Repeatability:0, totalCalls:0, optional:false, WaitFor:(\u003c-chan time.Time)(nil), waitTime:0, RunFn:(func(mock.Arguments))(nil), PanicMsg:(*string)(nil), requires:[]*mock.Call(nil)}}, test:mock.TestingT(nil), testData:objx.Map(nil), mutex:sync.Mutex{state:0, sema:0x0}}})"}]}],"parameters":[{"name":"ctx","value":"context.Background"},{"name":"request","value":"\u0026{Id:1 Name:1 StudioId:1 StartHour:0 EndHour:0}"}]}]}